import java.io.File;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class ConsoleEx5 {

    static String[] argArr;     //문자열 배열
    static LinkedList q = new LinkedList();     //사용자가 입력한 내용을 저장할 큐
    static final int MAX_SIZE = 5;              //큐에 최대 4개까지만 저장

    static File curDir;       //현재 작업 디렉토리 경로

    static {
        try{
            //현재 디렉토리
            curDir = new File(System.getProperty("user.dir"));
            System.out.println("curDir" +  curDir);
        }catch (Exception e){
            e.getMessage();
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        while(true){
            try{
                String prompt = curDir.getCanonicalPath() + ">>";
                System.out.println(prompt);

                String input = scanner.nextLine();

                save(input);

                input = input.trim();
                argArr = input.split(" +");

                String command = argArr[0].trim();

                if("".equals(command)){
                    continue;
                }

                command = command.toLowerCase();

                if(command.equals("q")){
                    System.out.println("exit...");
                    return;
                }else if(command.equals("history")){
                    history();
                }else if(command.equals("dir")){
                    dir();
                }else{
                    for (int i = 0; i < argArr.length; i++) {
                        System.out.println(argArr[i]);
                    }
                }

            }catch (Exception e){
                e.getMessage();
            }
        }
    }

    public static void save(String input){
        if(input == null || "".equals(input)){
            return;
        }

        q.offer(input);

        if(((LinkedList)q).size() > MAX_SIZE){
            q.remove();
        }
    }


    public static void history(){
        int i =0;
        LinkedList tmp = (LinkedList)q;
        ListIterator it = tmp.listIterator();

        while(it.hasNext()){
            System.out.println(++i +"." +it.next());
        }
    }

    //pattern, matcher 클래스에 대한 메서드 설명
//    https://coding-factory.tistory.com/529

    public static void dir(){
        String pattern = "";

        switch (argArr.length){
            case 1 :
                for(File test : curDir.listFiles()){
                   if(test.isDirectory()){
                       System.out.println("[" + test.getName() +"]");
                   }else{
                       System.out.println(test.getName());
                   }
                }
                break;
            case 2:
                pattern = argArr[1];
                pattern = pattern.toUpperCase();
                pattern = pattern.replace(".","\\");
                pattern =  pattern.replace("?","{1}");
                pattern = pattern.replace("*","*");
//                Pattern 클래스 주요 메서드
//                compile(String regex) : 주어진 정규표현식으로부터 패턴을 만듭니다.  >>검색
                Pattern pattern2 = Pattern.compile(pattern);
                for(File f :  curDir.listFiles()){
                    String tmp = f.getName().toUpperCase();
                    //입력된 패턴과 일치하는 것들만 출력한다.
                    Matcher samePattern = pattern2.matcher(tmp);

                    if(samePattern.matches()){
                        if(f.isDirectory()){
                            System.out.println("[" +f.getName() +"]");
                        }else{
                            System.out.println(f.getName());
                        }
                    }
                }
                break;
            default:
                System.out.println("USAGE : dir [filename]");
        }
    }
}


// case 1 :  // dir만 입력한 경우 현재 디렉토리의 모든 파일과 디렉토리를 보여준다.
//                        /*
//                            다음의 코드를 완성하세요.
//                            1. 반복문을 이용해서 현재디렉토리의 모든 파일의 목록을 출력한다.(File클래스의 listFiles()사용)
//                            2. 조건문을 같이 사용해서 디렉토리(폴더)인 경우, 이름의 앞뒤에 '[' 와 ']'를 붙여서 출력한다.
//                                (File클래스의 isDirectory()를 사용해서 체크)
//'                       */
//                        break;
//                  case 2 :  // dir과 패턴을 같이 입력한 경우, 예를 들면 dir *.class
//                        pattern = argArr[1];
//                        pattern = pattern.toUpperCase(); // 패턴에서 대소문자를 구별하지 않도록 대문자로 변경한다.
//
//                        /*
//                           다음의 코드를 완성하세요.
//                           1. 입력된 패턴(pattern)을 정규식 표현(Regular Expression)에 알맞게 치환한다.
//                               String클래스의 String replace(CharSequence target, CharSequence replacement)를 사용하자.
//                               예를 들면, pattern = pattern.replace("A","AA")는 pattern의 "A"를 "AA"로 치환한다.
//
//                           2. 반복문을 이용해서 현재 디렉토리 중, 입력된 패턴과 일치하는 것들만 출력한다.
//                              이때, 조건문을 같이 사용해서 디렉토리(폴더)인 경우, 이름의 앞뒤에 '[' 와 ']'를 붙여서 출력한다.
//                              (File클래스의 isDirectory()를 사용해서 체크)
//
//                              대소문자구별을 하지 않기 위해서, 패턴과 마찬가지로 파일이나 디렉토리명을 대문자로 변경해야한다.
//                              String tmp = f.getName().toUpperCase();
//
//                       */
//                        break;
//                  default :
//                        System.out.println("USAGE : dir [FILENAME]");
