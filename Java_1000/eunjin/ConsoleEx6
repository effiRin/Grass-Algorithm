package com.console;

import java.io.*;
import java.sql.SQLOutput;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class ConsoleEx6 {

    static String[] argArr;
    static LinkedList q = new LinkedList();
    static final int MAX_SIZE = 5;

    static File curDir;

    static {
        try{
            curDir = new File(System.getProperty("user.dir"));
            System.out.println("1111" + curDir);
        }catch (Exception e){

        }
    }

    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);

        while(true){
            try{
                String prompt = curDir.getCanonicalPath() + ">>";
                System.out.println(prompt);

                String input = sc.nextLine();

                save(input);

                input = input.trim();
                argArr = input.split(" +");

                String command =  argArr[0].trim();

                if("".equals(command)){
                    continue;
                }

                command = command.toLowerCase();

                if(command.equals("q")){
                    System.exit(0);
                }else if(command.equals("history")){
                    history();
                }else if(command.equals("dir")){
                    dir();
                }else if(command.equals("type")){
                    type();
                }else{
                    for(int i=0; i<argArr.length; i++){
                        System.out.println(argArr[i]);
                    }
                }
            }catch (Exception e){
                System.out.println("입력오류");
            }
        }
    }

    public static void save(String input){
        if(input == null || "".equals(input)){
            return;
        }

        q.offer(input);

        if(((LinkedList)q).size() > MAX_SIZE){
            q.remove();
        }
    }

    public static void history(){
        int i =0;
        LinkedList tmp = (LinkedList)q;
        ListIterator it = tmp.listIterator();

        while(it.hasNext()){
            System.out.println(++i +"." +it.next());
        }
    }

    public static void dir(){
        String pattern = "";

        switch (argArr.length){
            case 1 :
                for(File test : curDir.listFiles()){
                    if(test.isDirectory()){
                        System.out.println("[" + test.getName() +"]");
                    }else{
                        System.out.println(test.getName());
                    }
                }
                break;
            case 2:
                pattern = argArr[1];
                pattern = pattern.toUpperCase();
                pattern = pattern.replace(".","\\");
                pattern =  pattern.replace("?","{1}");
                pattern = pattern.replace("*","*");
//                Pattern 클래스 주요 메서드
//                compile(String regex) : 주어진 정규표현식으로부터 패턴을 만듭니다.  >>검색
                Pattern pattern2 = Pattern.compile(pattern);
                for(File f :  curDir.listFiles()){
                    String tmp = f.getName().toUpperCase();
                    //입력된 패턴과 일치하는 것들만 출력한다.
                    Matcher samePattern = pattern2.matcher(tmp);

                    if(samePattern.matches()){
                        if(f.isDirectory()){
                            System.out.println("[" +f.getName() +"]");
                        }else{
                            System.out.println(f.getName());
                        }
                    }
                }
                break;
            default:
                System.out.println("USAGE : dir [filename]");
        }
    }

    public static void type() throws IOException{
        if(argArr.length !=2){
            System.out.println("Usage : type FILE_NAME");
            return;
        }

        String fileName = argArr[1];

        File tmp = new File(fileName);

        //FileReader  bufferReader 둘다 파일 읽어옴
        //bufferReader가 더 빨리읽어와서 이걸 사용할거예요
        if(tmp.isFile()){
           // FileReader reder = new FileReader(tmp);
            BufferedReader buffer = new BufferedReader(new FileReader(tmp));
            if(buffer.readLine() !=null){
                System.out.println(tmp);
            }

        }else{
            System.out.println("존재하지 않는 파일");
        }
    }
}
